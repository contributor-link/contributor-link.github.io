{"version":3,"sources":["../../pfe-sass/mixins/_mixins.scss","pfe-accordion-header.scss","../../pfe-sass/extends/_extends.scss","pfe-accordion-header.css","../../pfe-sass/functions/_custom-properties.scss","../../pfe-sass/mixins/_containers.scss","../../pfe-sass/mixins/_components.scss","_shared-assets.scss"],"names":[],"mappings":"AAGM;EC+BN;ID/B4F,UAAA;IE4CxF,iCAAyD;IACzD,yBAAiC;EC3CnC;AACF;;AFCA;EAIE,kBAAkB;EAClB,cAAc;EACd,aAAa;EAEb,6BGgEkC;EHhElC,oEGgEkC;EH/DlC,cG+DkC;EH/DlC,yEG+DkC;EH7DlC,yCG6DkC;UH7DlC,iCG6DkC;EH7DlC,0EG6DkC;UH7DlC,kEG6DkC;EH1DlC,qFAAkB;EAIlB,sBAAiB;AERnB;;AHiEU;EACN,aAAa;AG9DjB;;AFdA;;;EIFI,8BAJsC;UAItC,sBAJsC;AF0B1C;;AFEA;EACE,SAAS;AECX;;AFGA;EACE,eAAe;EIef,aAAa;EACb,kBAAkB;EJPlB,WAAY;EACZ,SAAS;EAET,oBAAa;EAAb,qBAAa;EAAb,oBAAa;EAAb,aAAa;EACb,yBAAmB;EAAnB,2BAAmB;MAAnB,sBAAmB;UAAnB,mBAAmB;EACnB,uBAA2B;EAA3B,mCAA2B;MAA3B,oBAA2B;UAA3B,2BAA2B;EAC3B,qBAA8C;EAA9C,0DAA8C;EAE9C,8BG2BkC;EH3BlC,uIG2BkC;EHzBlC,6BAA6B;EAC7B,cGwBkC;EHxBlC,yEGwBkC;EHrBlC,gBAAkB;EAClB,wFGtBkC;EHsBlC,gIGtBkC;EHuBlC,kBGmBkC;EHnBlC,0FGmBkC;EHlBlC,gBGkBkC;EHlBlC,iGGkBkC;EHjBlC,gBGiBkC;EHjBlC,iDGiBkC;EHhBlC,gBG1BkC;EH0BlC,+CG1BkC;EH4BlC,gFAAqB;EA6BrB,mBGzDkC;EHyDlC,4DGzDkC;EH0DlC,iBGhBkC;EHgBlC,6FGhBkC;EHiBlC,qBGjBkC;EHiBlC,kGGjBkC;EHoBlC,+BAA+B;EAC/B,8BAA8B;AE1ChC;;AFxBA;EIqBI,kBAAkB;EAClB,WAAW;EACX,SJlBa;EImBb,UJnBa;EIoBb,uBAAwD;EAAxD,mEAAwD;EACxD,wBAAyD;EAAzD,oEAAyD;EACzD,kBDxBgC;ECwBhC,uDDxBgC;ECyBhC,6BAA2E;EAA3E,yGAA2E;AFO/E;;AHlEM;EC+BN;ID/B4F,UAAA;IK6DtF,YAAY;EFWhB;AACF;;AF1CA;EImCI,qBJ5Be;AEuCnB;;AF9CA;EIyCI,aAAa;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","file":"pfe-accordion-header.css","sourcesContent":["@mixin browser-query($browser-list) {\n  @each $browser in $browser-list {\n    @if $browser == ie11 {\n      @media screen and (-ms-high-contrast: active), screen and (-ms-high-contrast: none) { /* IE10+ */\n        @content;\n      }\n    }\n    @if $browser == edge12 {\n      @supports (-ms-accelerator: true) { /* Microsoft Edge Browser 12+ */\n        @content;\n      }\n    }\n    @if $browser == edge {\n      @supports (-ms-ime-align: auto) { /* Microsoft Edge Browser 16+ (All) */\n        @content;\n      }\n    }\n    @if $browser == firefox {\n      @media all and (min--moz-device-pixel-ratio:0) { /* Mozilla Firefox (All) */\n        @content;\n      }\n    }\n  }\n}\n\n@mixin pfe-transition($properties...) {\n  $return: null;\n  @each $property in $properties {\n    @if length($property) == 1 {\n      $return: append($return, #{$property} 250ms $pfe-global--animation-timing, comma);\n    }\n    @else if length($property) == 2 {\n      $return: append($return, nth($property, 1) nth($property, 2), comma);\n    }\n  }\n  transition: $return;\n}\n\n// Make a CSS arrow\n@mixin pfe-arrow($type, $color, $width: 8px, $height: 5px, $pseudo: false) {\n  $direction: (\n    up: 180deg,\n    down: 0deg,\n    right: -90deg,\n    left: 90deg,\n  );\n  border-style: pfe-var(surface--border-style);\n  border-width: $width $height 0;\n  border-color: transparent;\n  border-top-color: $color;\n  transform: rotate(map-get($direction, $type));\n  @if $pseudo {\n    display: inline-block;\n    content: \"\";\n    @content;\n  }\n}\n\n@mixin pfe-arrow-color($color) {\n  border-top-color: $color;\n}\n\n@mixin pfe-print-media {\n  @media print {\n    @content;\n  }\n}\n\n@mixin pfe-print-background {\n  -webkit-print-color-adjust: exact;\n  color-adjust: exact;\n}\n\n@mixin pfe-no-print-background {\n  @include pfe-print-media {\n    background-color: white !important;\n    background-image: none !important;\n    box-shadow: none !important;\n  }\n}\n\n@mixin pfe-hidden {\n  @at-root #{&}([hidden]) {\n    display: none;\n  }\n}\n\n@mixin pfe-pipe( $position: right, $padding: 0, $margin: 0, $color: $border-color) {\n  border: pfe-var(surface--border-width) pfe-var(surface--border-style) transparent;\n  border-#{$position}-color: $color;\n  @if $position == right {\n    padding-left: $padding;\n    margin-right: $margin;\n  }\n  @else if $position == left {\n    padding-right: $padding;\n    margin-left: $margin;\n  }\n}\n\n@mixin pfe-retina {\n  @media (-webkit-min-device-pixel-ratio: 2), (min-resolution: 192dpi) {\n    @content;\n  }\n}\n\n@mixin pfe-icon($path, $display: flex, $size: 1em) {\n  display: #{$display};\n  @if $path {\n    background: #{$path} no-repeat;\n    background-size: contain;\n    background-position: center;\n  }\n  width: #{$size};\n  height: #{$size};\n  @content;\n}\n\n@mixin pfe-local-debug($map: $LOCAL-VARIABLES) {\n  :root {\n      @include pfe-print-local($map);\n  }\n} ","@import \"shared-assets\";\n\n/// ===========================================================================\n/// ACCORDION HEADER\n/// Styles sourced from: @patternfly/patternfly/components/Accordion/accordion.scss\n/// then updated for pfe theming variables\n/// ===========================================================================\n:host {\n  @include pfe-hidden;\n  @include pfe-box-sizing;\n  \n  position: relative;\n  display: block;\n  outline: none;\n\n  background-color: pfe-local(BackgroundColor); // transparent\n  color:            pfe-local(Color); // broadcasted text\n\n  box-shadow: pfe-local(BoxShadow); // default is none\n\n  // Set the chevron to use the same color as the text\n  --pfe-icon--color: #{pfe-local(Color)};\n\n  // Note: 14px here gives us the 16px x 10.3px icon from designs\n  // @TODO Should this use the ui-element variable?\n  --pfe-icon--size: 14px;\n}\n\n// Remove margins from the heading tag\n#heading {\n  margin: 0;\n}\n\n// Button element\n.pf-c-accordion__toggle {\n  cursor: pointer;\n\n  // This is handled by the ::before pseudo element\n  @include focus-ring(\n    $offset: -2px,\n    $pseudo: before,\n    $color: #6b9ff0 // @TODO: Where should this live in our kit?\n  );\n\n  width:  100%;\n  margin: 0;\n\n  display: flex;\n  align-items: center;\n  justify-content: flex-start;\n  gap: calc(#{pfe-var(container-padding)} * 1.5); // 24px\n\n  padding:          pfe-local(Padding);\n\n  background-color: transparent;\n  color:            pfe-local(Color); // broadcasted text\n\n  // Default typography\n  text-align:   left;\n  font-family:  pfe-var(font-family--heading);\n  font-size:    pfe-local(FontSize--header);\n  font-weight:  pfe-local(FontWeight--header);\n  text-align:   pfe-local(TextAlign);\n  line-height:  pfe-var(line-height);\n\n  --_typography-offset: calc((1em * #{pfe-var(line-height)} - 1em) / 2);\n\n  .pf-c-accordion__toggle-icon {\n    --_typography-offset: calc((1em * #{pfe-var(line-height)} - var(--pfe-icon--size, 14px)) / 2);\n  }\n\n  // To accomodate for the line-height when the header does not wrap\n  .pf-c-accordion__toggle-text {\n    // ~= -5px -> 20px font-size * 1.5 line height / 2 top+bottom\n    margin-top: calc(-1 * var(--_typography-offset, 5px));\n    margin-bottom: calc(-1 * var(--_typography-offset, 5px));\n  }\n  \n  // Very minor adjustment to the top of the icon for alignment\n  .pf-c-accordion__toggle-icon {\n    margin-top: calc(var(--_typography-offset, 5px) / 4);\n  }\n\n  // @TODO: Do we want to force dark background color in dark mode or rely on the wrapper\n  // @media (prefers-color-scheme: dark) {\n  //   --context: dark;\n  //   background-color: pfe-local(BackgroundColor, $fallback: pfe-var(surface--darker)); // transparent\n  //   color:            pfe-local(Color, $fallback: pfe-var(text--on-dark)); // broadcasted text\n  // }\n\n  // Force IE11 to use white to prevent content from being un-readable\n  @extend %fallback-surface;\n\n  // Standard border styles\n  border-style: pfe-var(surface--border-style);\n  border-width: pfe-local(BorderWidth);\n  border-color: pfe-local(BorderColor);\n  \n  // Default accordion uses transparent right & left borders\n  border-right-color: transparent;\n  border-left-color: transparent;\n\n  // Remove the top border for non-first headers\n  // (the bottom-border of the previous provides delineation)\n  :host(:not(:first-of-type)) & {\n    border-top-width: 0;\n  }\n\n  // Accent bar\n  &::after {\n    @include accent-bar(\n      $direction: vertical,\n      $offset: (\n        top: -1px,\n        left: -1px,\n        bottom: -1px\n      ),\n      $thickness: pfe-local(accent--width),\n      $color: pfe-local(accent) // defaults to transparent\n    );\n    z-index: #{pfe-fetch(ZIndex) + 1}; // Fallback value\n    z-index: calc(#{pfe-local(ZIndex)} + 1);\n\n    @include browser-query(ie11) {\n      &:hover,\n      &:active,\n      :host(:not([expanded])) &:focus,\n      :host([expanded]) &,\n      :host(.animating) & {\n        background-color: #{pfe-fetch(accent--active)};\n      }\n    }\n  }\n\n  // Hover, active, and focus state (only when not open)\n  // States source from the button element, not the host\n  &:hover,\n  &:active,\n  :host(:not([expanded])) &:focus {\n    --pfe-accordion--BackgroundColor: #{pfe-local(BackgroundColor--active)};\n    --pfe-accordion--Color:           #{pfe-local(Color--active)};\n  }\n\n  :host(:not([expanded])) &:hover,\n  :host(:not([expanded])) &:active,\n  :host(:not([expanded])) &:focus {\n    --pfe-accordion--accent:          #{pfe-local(accent--active)};\n  }\n  \n  @each $context in (dark, saturated) {\n    $overlay: rgba(247, 247, 249, .1);\n  \n    @if $context == saturated {\n      $overlay: rgba(0, 0, 0, .2);\n    }\n    \n    // Set properties to use their active modifier\n    :host([on=\"#{$context}\"]) &:hover,\n    :host([on=\"#{$context}\"]:not([expanded])) &:focus,\n    :host([on=\"#{$context}\"]) &:active {\n      --pfe-accordion--BackgroundColor: #{pfe-local(BackgroundColor--active, $overlay)};\n      --pfe-accordion--Color:           #{pfe-local(Color--active)};\n    }\n\n    :host([on=\"#{$context}\"]:not([expanded])) &:hover,\n    :host([on=\"#{$context}\"]:not([expanded])) &:active,\n    :host([on=\"#{$context}\"]:not([expanded])) &:focus {\n      --pfe-accordion--accent:          #{pfe-local(accent--active, #{pfe-var(ui-accent--on-#{$context})})};\n    }\n  }\n\n  :host([expanded]) &,\n  :host(.animating) & {\n    border-bottom-width: 0;\n  }\n\n  :host([expanded]) &,\n  :host(.animating) &,\n  :host([disclosure]:not([disclosure=\"false\"])) & {\n    border-right-color: pfe-local(BorderColor);\n    border-left-color:  pfe-local(BorderColor);\n  }\n\n  // Disclosure typography + styles\n  :host([disclosure]:not([disclosure=\"false\"])) & {\n    gap: calc(#{pfe-var(container-padding)} / 2); // 8px\n    font-family:  pfe-var(font-family);\n    font-size:    pfe-local(FontSize--header, $fallback: pfe-var(FontSize--md));\n    font-weight:  pfe-local(FontWeight--header, $fallback: pfe-var(font-weight--semi-bold));\n  }\n}\n\n// This element sets the layout for the text, accents, and icons inside the button\n.pf-c-accordion__toggle-wrapper {\n  // Fill the rest of the .pf-c-accordion__toggle\n  flex-grow: 1;\n  // Set up the layout for the text and accent elements\n  display: flex;\n  align-items: center;\n  justify-content: flex-start;\n  \n  // Internal gap is 24px\n  // @TODO design hook?\n  gap: calc(#{pfe-var(container-padding)} * 1.5); // 24px\n\n  @include browser-query(ie11) {\n    &::after {\n      @include pfe-chevron(\n        $state: closed,\n        $size: 14px,\n        $width: 2px\n      );\n      top: 1em !important;\n    }\n\n    :host([expanded]) &::after,\n    :host(.animating) &::after {\n      transform: rotate(45deg);\n    }\n  }\n}\n\n// Text inside the button, wrapped in a span tag\n// limits text width to 80ch per readability research\n.pf-c-accordion__toggle-text {\n  max-width: pfe-local(MaxWidth--content);\n}\n\n// Chevron icon\n.pf-c-accordion__toggle-icon {\n  // Note: do not set this to center because headers can wrap\n  // and we want the icon to align with the top row of content\n  align-self: flex-start;\n\n  transition-property: transform;\n  transition-duration: pfe-var(animation-speed);\n  transition-timing-function: pfe-var(animation-timing);\n\n  :host([expanded]) & {\n    transform: rotate(90deg);\n  }\n\n  // Move the icon to the front of the row on disclosures\n  :host([disclosure]:not([disclosure=\"false\"])) & {\n    order: -1;\n  }\n\n  // Hide pfe-icon on IE11, using the chevron\n  @include browser-query(ie11) {\n    display: none !important;\n  }\n}\n\n// Applies to accent region inside the template\n.pf-c-accordion__toggle-accents {\n  flex-grow: 1;\n}\n\n// Same styles as the panel, see shared-assets\n@include pfe-accordion--expanded();\n","// @todo Change to mixins; no efficiency gain with placeholders in web components\n\n/// Clear box element styles\n%reset-box {\n  margin: 0;\n  padding: 0;\n}\n\n/// Clear list styles\n%reset-list {\n  margin: 0;\n  padding: 0;\n  list-style: none;\n}\n\n/// Clear button styles\n%reset-button {\n  background-color: transparent;\n  border: none;\n  margin: 0;\n  padding: 0;\n  text-align: left;\n}\n\n/// Set up a container element\n%container {\n  position: relative;\n  display: block;\n  width: 100%;\n  padding: pfe-var(container-padding);\n}\n\n/// Screen-reader only content\n%sr-only {\n  position: absolute;\n  overflow: hidden;\n  clip: rect(0, 0, 0, 0);\n  height: 1px;\n  width: 1px;\n  margin: -1px;\n  padding: 0;\n  border: 0;\n}\n\n/// Fallback surface styles for IE11 only\n%fallback-surface {\n  @include browser-query(ie11) {\n    background-color: pfe-fetch(surface--lightest) !important;\n    color: pfe-fetch(text) !important;\n  }\n}\n\n/// Fallback text styles for IE11 only\n%fallback-text {\n  @include browser-query(ie11) {\n    color: pfe-fetch(text) !important;\n  }\n}\n","@media screen and (-ms-high-contrast: active), screen and (-ms-high-contrast: none) {\n  .pf-c-accordion__toggle {\n    /* IE10+ */\n    background-color: #fff !important;\n    color: #151515 !important;\n  }\n}\n\n:host {\n  position: relative;\n  display: block;\n  outline: none;\n  background-color: var(--pfe-accordion--BackgroundColor, transparent);\n  color: var(--pfe-accordion--Color, var(--pfe-broadcasted--text, #3c3f42));\n  box-shadow: var(--pfe-accordion--BoxShadow, 0 5px 4px transparent);\n  --pfe-icon--color: var(--pfe-accordion--Color, var(--pfe-broadcasted--text, #3c3f42));\n  --pfe-icon--size: 14px;\n}\n\n:host([hidden]) {\n  display: none;\n}\n\n:host *,\n:host *::before,\n:host *::after {\n  box-sizing: border-box;\n}\n\n#heading {\n  margin: 0;\n}\n\n.pf-c-accordion__toggle {\n  cursor: pointer;\n  outline: none;\n  position: relative;\n  width: 100%;\n  margin: 0;\n  display: flex;\n  align-items: center;\n  justify-content: flex-start;\n  gap: calc(var(--pfe-theme--container-padding, 1rem) * 1.5);\n  padding: var(--pfe-accordion--Padding, var(--pfe-theme--container-padding, 1rem) calc(var(--pfe-theme--container-padding, 1rem) * 1.5));\n  background-color: transparent;\n  color: var(--pfe-accordion--Color, var(--pfe-broadcasted--text, #3c3f42));\n  text-align: left;\n  font-family: var(--pfe-theme--font-family--heading, \"Red Hat Display\", \"RedHatDisplay\", \"Overpass\", Overpass, Arial, sans-serif);\n  font-size: var(--pfe-accordion--FontSize--header, var(--pf-global--FontSize--xl, 1.25rem));\n  font-weight: var(--pfe-accordion--FontWeight--header, var(--pfe-theme--font-weight--normal, 400));\n  text-align: var(--pfe-accordion--TextAlign, left);\n  line-height: var(--pfe-theme--line-height, 1.5);\n  --_typography-offset: calc((1em * var(--pfe-theme--line-height, 1.5) - 1em) / 2);\n  border-style: var(--pfe-theme--surface--border-style, solid);\n  border-width: var(--pfe-accordion--BorderWidth, var(--pfe-theme--surface--border-width, 1px));\n  border-color: var(--pfe-accordion--BorderColor, var(--pfe-theme--color--surface--border, #d2d2d2));\n  border-right-color: transparent;\n  border-left-color: transparent;\n}\n\n.pf-c-accordion__toggle::before {\n  position: absolute;\n  content: \"\";\n  top: -2px;\n  left: -2px;\n  width: calc(100% + var(--pfe-theme--ui--border-width--active, 3px));\n  height: calc(100% + var(--pfe-theme--ui--border-width--active, 3px));\n  border-radius: var(--pfe-theme--ui--border-radius, 2px);\n  border: var(--pfe-theme--ui--border-width--md, 2px) var(--pfe-theme--ui--border-style, solid) transparent;\n}\n\n@media screen and (-ms-high-contrast: active), screen and (-ms-high-contrast: none) {\n  .pf-c-accordion__toggle::before {\n    /* IE10+ */\n    height: 100%;\n  }\n}\n\n.pf-c-accordion__toggle:focus::before {\n  border-color: #6b9ff0;\n}\n\n.pf-c-accordion__toggle:focus:not(:focus-visible)::before {\n  border: unset;\n}\n\n.pf-c-accordion__toggle .pf-c-accordion__toggle-icon {\n  --_typography-offset: calc((1em * var(--pfe-theme--line-height, 1.5) - var(--pfe-icon--size, 14px)) / 2);\n}\n\n.pf-c-accordion__toggle .pf-c-accordion__toggle-text {\n  margin-top: calc(-1 * var(--_typography-offset, 5px));\n  margin-bottom: calc(-1 * var(--_typography-offset, 5px));\n}\n\n.pf-c-accordion__toggle .pf-c-accordion__toggle-icon {\n  margin-top: calc(var(--_typography-offset, 5px) / 4);\n}\n\n:host(:not(:first-of-type)) .pf-c-accordion__toggle {\n  border-top-width: 0;\n}\n\n.pf-c-accordion__toggle::after {\n  position: absolute;\n  content: \"\";\n  top: -1px;\n  left: -1px;\n  bottom: -1px;\n  background-color: var(--pfe-accordion--accent, transparent);\n  width: calc(var(--pfe-accordion--accent--width, var(--pfe-theme--surface--border-width--active, 3px)) - -1px);\n  height: calc(100% - -1px - -1px);\n  z-index: 4;\n  z-index: calc(var(--pfe-accordion--ZIndex, 3) + 1);\n}\n\n@media screen and (-ms-high-contrast: active), screen and (-ms-high-contrast: none) {\n  .pf-c-accordion__toggle::after {\n    /* IE10+ */\n  }\n  .pf-c-accordion__toggle::after:hover, .pf-c-accordion__toggle::after:active,\n  :host(:not([expanded])) .pf-c-accordion__toggle::after:focus,\n  :host([expanded]) .pf-c-accordion__toggle::after,\n  :host(.animating) .pf-c-accordion__toggle::after {\n    background-color: var(--pfe-theme--color--ui-accent, #06c);\n  }\n}\n\n.pf-c-accordion__toggle:hover, .pf-c-accordion__toggle:active,\n:host(:not([expanded])) .pf-c-accordion__toggle:focus {\n  --pfe-accordion--BackgroundColor: var(--pfe-accordion--BackgroundColor--active, var(--pfe-theme--color--surface--lighter, #f0f0f0));\n  --pfe-accordion--Color:           var(--pfe-accordion--Color--active, var(--pfe-broadcasted--text, #3c3f42));\n}\n\n:host(:not([expanded])) .pf-c-accordion__toggle:hover,\n:host(:not([expanded])) .pf-c-accordion__toggle:active,\n:host(:not([expanded])) .pf-c-accordion__toggle:focus {\n  --pfe-accordion--accent:          var(--pfe-accordion--accent--active, var(--pfe-theme--color--ui-accent, #06c));\n}\n\n:host([on=\"dark\"]) .pf-c-accordion__toggle:hover,\n:host([on=\"dark\"]:not([expanded])) .pf-c-accordion__toggle:focus,\n:host([on=\"dark\"]) .pf-c-accordion__toggle:active {\n  --pfe-accordion--BackgroundColor: var(--pfe-accordion--BackgroundColor--active, rgba(247, 247, 249, 0.1));\n  --pfe-accordion--Color:           var(--pfe-accordion--Color--active, var(--pfe-broadcasted--text, #3c3f42));\n}\n\n:host([on=\"dark\"]:not([expanded])) .pf-c-accordion__toggle:hover,\n:host([on=\"dark\"]:not([expanded])) .pf-c-accordion__toggle:active,\n:host([on=\"dark\"]:not([expanded])) .pf-c-accordion__toggle:focus {\n  --pfe-accordion--accent:          var(--pfe-accordion--accent--active, var(--pfe-theme--color--ui-accent--on-dark, #73bcf7));\n}\n\n:host([on=\"saturated\"]) .pf-c-accordion__toggle:hover,\n:host([on=\"saturated\"]:not([expanded])) .pf-c-accordion__toggle:focus,\n:host([on=\"saturated\"]) .pf-c-accordion__toggle:active {\n  --pfe-accordion--BackgroundColor: var(--pfe-accordion--BackgroundColor--active, rgba(0, 0, 0, 0.2));\n  --pfe-accordion--Color:           var(--pfe-accordion--Color--active, var(--pfe-broadcasted--text, #3c3f42));\n}\n\n:host([on=\"saturated\"]:not([expanded])) .pf-c-accordion__toggle:hover,\n:host([on=\"saturated\"]:not([expanded])) .pf-c-accordion__toggle:active,\n:host([on=\"saturated\"]:not([expanded])) .pf-c-accordion__toggle:focus {\n  --pfe-accordion--accent:          var(--pfe-accordion--accent--active, var(--pfe-theme--color--ui-accent--on-saturated, #fff));\n}\n\n:host([expanded]) .pf-c-accordion__toggle,\n:host(.animating) .pf-c-accordion__toggle {\n  border-bottom-width: 0;\n}\n\n:host([expanded]) .pf-c-accordion__toggle,\n:host(.animating) .pf-c-accordion__toggle,\n:host([disclosure]:not([disclosure=\"false\"])) .pf-c-accordion__toggle {\n  border-right-color: var(--pfe-accordion--BorderColor, var(--pfe-theme--color--surface--border, #d2d2d2));\n  border-left-color: var(--pfe-accordion--BorderColor, var(--pfe-theme--color--surface--border, #d2d2d2));\n}\n\n:host([disclosure]:not([disclosure=\"false\"])) .pf-c-accordion__toggle {\n  gap: calc(var(--pfe-theme--container-padding, 1rem) / 2);\n  font-family: var(--pfe-theme--font-family, \"Red Hat Text\", \"RedHatText\", \"Overpass\", Overpass, Arial, sans-serif);\n  font-size: var(--pfe-accordion--FontSize--header, var(--pf-global--FontSize--md, 1rem));\n  font-weight: var(--pfe-accordion--FontWeight--header, var(--pfe-theme--font-weight--semi-bold, 600));\n}\n\n.pf-c-accordion__toggle-wrapper {\n  flex-grow: 1;\n  display: flex;\n  align-items: center;\n  justify-content: flex-start;\n  gap: calc(var(--pfe-theme--container-padding, 1rem) * 1.5);\n}\n\n@media screen and (-ms-high-contrast: active), screen and (-ms-high-contrast: none) {\n  .pf-c-accordion__toggle-wrapper {\n    /* IE10+ */\n  }\n  .pf-c-accordion__toggle-wrapper::after {\n    content: \"\";\n    position: absolute;\n    top: calc(var(--pfe-theme--container-spacer, 1rem) + 14px);\n    display: block;\n    border-style: var(--pfe-theme--surface--border-style, solid);\n    height: 14px;\n    width: 14px;\n    transition: transform 0.15s;\n    border-width: 0 2px 2px 0;\n    transform: rotate(-45deg);\n    right: calc(var(--pfe-theme--container-spacer, 1rem) * 1.3125);\n    top: 1em !important;\n  }\n  :host([expanded]) .pf-c-accordion__toggle-wrapper::after,\n  :host(.animating) .pf-c-accordion__toggle-wrapper::after {\n    transform: rotate(45deg);\n  }\n}\n\n.pf-c-accordion__toggle-text {\n  max-width: var(--pfe-accordion--MaxWidth--content, 80ch);\n}\n\n.pf-c-accordion__toggle-icon {\n  align-self: flex-start;\n  transition-property: transform;\n  transition-duration: var(--pfe-theme--animation-speed, 0.3s);\n  transition-timing-function: var(--pfe-theme--animation-timing, cubic-bezier(0.465, 0.183, 0.153, 0.946));\n}\n\n:host([expanded]) .pf-c-accordion__toggle-icon {\n  transform: rotate(90deg);\n}\n\n:host([disclosure]:not([disclosure=\"false\"])) .pf-c-accordion__toggle-icon {\n  order: -1;\n}\n\n@media screen and (-ms-high-contrast: active), screen and (-ms-high-contrast: none) {\n  .pf-c-accordion__toggle-icon {\n    /* IE10+ */\n    display: none !important;\n  }\n}\n\n.pf-c-accordion__toggle-accents {\n  flex-grow: 1;\n}\n\n:host {\n  transition-property: box-shadow, border;\n  transition-timing-function: var(--pfe-theme--animation-timing, cubic-bezier(0.465, 0.183, 0.153, 0.946));\n  transition-duration: calc(pfe-var(animation-speed) / 2);\n}\n\n:host([expanded]),\n:host(.animating) {\n  --pfe-accordion--BackgroundColor: var(--pfe-accordion--BackgroundColor--expanded, var(--pfe-theme--color--surface--lightest, #fff));\n  --pfe-accordion--Color:           var(--pfe-accordion--Color--expanded, var(--pfe-broadcasted--text, #3c3f42));\n  --pfe-accordion--accent:          var(--pfe-accordion--accent--expanded, var(--pfe-theme--color--ui-accent, #06c));\n}\n\n:host([expanded]:not(.animating)) {\n  --pfe-accordion--BoxShadow: var(--pfe-accordion--BoxShadow--expanded, 0 5px 4px rgba(140, 140, 140, 0.35));\n}\n\n:host([on=\"dark\"][expanded]),\n:host([on=\"dark\"].animating) {\n  --pfe-accordion--BackgroundColor: var(--pfe-accordion--BackgroundColor--expanded, rgba(247, 247, 249, 0.1));\n  --pfe-accordion--Color:           var(--pfe-accordion--Color--expanded, var(--pfe-broadcasted--text--on-dark, #fff));\n  --pfe-accordion--accent:          var(--pfe-accordion--accent--expanded, var(--pfe-theme--color--ui-accent--on-dark, #73bcf7));\n}\n\n:host([expanded]:not(.animating)) {\n  --pfe-accordion--BoxShadow: var(--pfe-accordion--BoxShadow--expanded, none);\n}\n\n:host([on=\"saturated\"][expanded]),\n:host([on=\"saturated\"].animating) {\n  --pfe-accordion--BackgroundColor: var(--pfe-accordion--BackgroundColor--expanded, rgba(0, 0, 0, 0.2));\n  --pfe-accordion--Color:           var(--pfe-accordion--Color--expanded, var(--pfe-broadcasted--text--on-saturated, #fff));\n  --pfe-accordion--accent:          var(--pfe-accordion--accent--expanded, var(--pfe-theme--color--ui-accent--on-saturated, #fff));\n}\n\n:host([expanded]:not(.animating)) {\n  --pfe-accordion--BoxShadow: var(--pfe-accordion--BoxShadow--expanded, none);\n}\n","////\n/// Tools for leveraging custom property stacks\n/// @group custom-properties\n/// @author castastrophe\n////\n\n/// Get full theme stack with a fallback from the provided map - used by pfe-var and pfe-zindex\n/// @param {String} $category  - Category name to be appended to variables within the map/system\n/// @param {String} $key - Variable name to be used and prepended with --pfe-theme\n/// @param {Map} $map  - Sass map of variables\n/// @param {String} $fallback [null]  - Optional fallback override\n/// @param {Boolean} $use-fallback [true]  - Optional hook to return a stack with no fallback value\n/// @requires $custom-prop-prefix\n/// @return {String} theme stack with fallback value from a sass map\n@function pfe-get-from-map($category, $key, $map, $fallback: null, $prefix: \"#{$custom-prop-prefix}-theme\", $use-fallback: true) {\n    // Start building the variable declaration\n    $var-declaration: \"--#{$prefix}--\";\n    @if $prefix == \"pf-c\" {\n        $var-declaration: \"--#{$prefix}-\";  // one dash at the end\n    }\n    // If the category exists, inject that into the string\n    @if $category != \"\" {\n        $var-declaration: \"#{$var-declaration}#{$category}--\";\n    }\n    // Append the key to the string\n    $var-declaration: \"#{$var-declaration}#{$key}\";\n\n    // If the fallback is not provided but use-fallback is set to true\n    @if $fallback == null and $use-fallback and map-get($map, $key) != null {\n        $fallback: map-get($map, $key);\n    }\n    @if $fallback != null {\n        // Create the variable declaration\n        $var-declaration: \"#{$var-declaration}, #{$fallback}\";\n    }\n\n    // Return the variable declaration string\n    @return var(#{$var-declaration});   \n}\n\n\n\n/// Returns CSS Var for the local component-scoped variable\n/// @param {String} $cssvar - Variable identifiers which are postfixed and combined using '--'\n/// @param {String} $region - Identifies the region or slot to which this is assigned\n/// @see $custom-prop-prefix\n/// @see $LOCAL\n/// @example\n///   :host {\n///       padding-top:      #{pfe-local(paddingTop)};\n///       padding-bottom:   #{pfe-local(paddingBottom)};\n///   }\n@function pfe-local($cssvar, $fallback: null, $region: null) {\n    // If a fallback is not defined, use the global variables map\n    @if $fallback == null and length($LOCAL-VARIABLES) > 0 {\n        @if $region == null {\n            $fallback: map-get($LOCAL-VARIABLES, $cssvar);\n        }\n        @else {\n            $submap: map-get($LOCAL-VARIABLES, $region);\n            @if type-of($submap) == \"map\" {\n                $fallback: map-deep-get($LOCAL-VARIABLES, $region, $cssvar);\n            }\n        }\n    }\n\n    // If a region value exists, build the region string\n    @if $region != null {\n        $region: \"__#{$region}\";\n    }\n\n    // Start building the variable declaration\n    $var-declaration: \"--#{$custom-prop-prefix}-#{$LOCAL}#{$region}--#{to-string($cssvar, '--')}\";\n    \n    @if $fallback != null {\n        $var-declaration: \"#{$var-declaration}, #{$fallback}\";\n    }\n\n    // Return the variable declaration string\n    @return var(#{$var-declaration});\n}\n\n/// Fetches a CSS variable stack for broadcasted variables, providing a hook for context\n/// to influence the styles of children elements such as p tags or links.\n/// @param {String} $broadcast - name of the broadcast variable to apply\n/// @requires {String} $custom-prop-prefix - Name of repo, which is \"pfe\"\n/// @example - scss\n///   :host {\n///     color: pfe-broadcasted(link);\n///   }\n/// @example - css\n///   :host {\n///     color: var(--pfe-broadcasted--link, #06c);\n///   }\n@function pfe-broadcasted($broadcast, $use-fallback: true) {\n    $fallback: \"\";\n    @if $use-fallback {\n        $fallback: \", #{map-get($pfe-broadcasted, #{to-string($broadcast,'--')})}\";\t\n    }\n    @if not index($BROADCAST-VARS, first(str-split($broadcast, '--'))) {\n      @error \"--#{$custom-prop-prefix}-broadcasted--#{$broadcast} variable is not currently supported.\";\n    }\n    @else {\n      @return var(--#{$custom-prop-prefix}-broadcasted--#{to-string($broadcast,'--')}#{unquote($fallback)});\n    }\n}\n\n/// Returns CSS variable stack with exposed theme variable and respective fallback\n/// @param {String} $cssvar - Variable name to be used and prepended with --pfe-theme--zindex\n/// @requires {Map} $pfe-zindex - SASS Map of z-index values\n/// @see $pfe-zindex\n/// @example - scss - In your component styles\n///   .my-element {\n///     z-index: pfe-zindex( content );\n///   }\n\n@function pfe-zindex($cssvar) {\n    $var-name: to-string($cssvar, \"--\");\n    @if map-get($pfe-zindex, $var-name) != null {\n        @return pfe-get-from-map(\"zindex\", $var-name, $pfe-zindex);\n    }\n    @else {\n        @error \"The key for #{$var-name} could not be found in the $pfe-zindex map.\";\n    }\n}\n\n/// Returns the value (only) of a property from the respective maps\n/// Similar to pfe-var, but does not include css variable in the compiled CSS\n/// @param {String} $name - Name of the key for the map\n/// @param {String} $region - Identifies the region or slot to which this is assigned\n/// @see $pfe-vars\n/// @see $pfe-colors\n/// @see $pfe-broadcasted\n/// @example - scss - In your component styles\n///   .my-element {\n///     background-color: pfe-fetch( ui-base );\n///   }\n@function pfe-fetch($name, $region: null) {\n    $var-name: to-string($name, \"--\");\n    @if $region != null and map-deep-get($LOCAL-VARIABLES, $region, $var-name) != null {\n        @return map-deep-get($LOCAL-VARIABLES, $region, $var-name);\n    }\n    @else if $region == null and map-get($LOCAL-VARIABLES, $var-name) != null {\n        @return map-get($LOCAL-VARIABLES, $var-name);\n    }\n    @else if map-get($pfe-vars, $var-name) != null {\n        @return map-get($pfe-vars, $var-name);\n    }\n    @else if map-get($pfe-colors, $var-name) != null {\n        @return map-get($pfe-colors, $var-name);\n    }\n    @else if map-get($pfe-broadcasted, $var-name) != null {\n        @return map-get($pfe-broadcasted, $var-name);\n    }\n    @else if map-get($pfe-typography-base, $var-name) != null {\n        @return map-get($pfe-typography-base, $var-name);\n    }\n\n    // PATTERNFLY CORE\n    @else if map-get($pf-type-sizing, $var-name) != null {\n        @return map-get($pf-type-sizing, $var-name);\n    }\n    @else if map-get($pf-type-sizing--component, $var-name) != null {\n        @return map-get($pf-type-sizing--component, $var-name);\n    }\n    @else if map-get($pf-type-sizing--modifers, $var-name) != null {\n        @return map-get($pf-type-sizing--modifers, $var-name);\n    }\n    @else if map-get($pf-type-sizing--content, $var-name) != null {\n        @return map-get($pf-type-sizing--content, $var-name);\n    }\n    // DEPRECATED\n    @else if map-get($pfe-typography-base-deprecated, $var-name) != null {\n        @return map-get($pfe-typography-base-deprecated, $var-name);\n    }\n    @else if map-get($pfe-typography-deprecated, $var-name) != null {\n        @return map-get($pfe-typography-deprecated, $var-name);\n    }\n    @else {\n        @error \"#{$var-name} could not be found.\";\n    }\n}\n\n/// Returns CSS variable stack with exposed theme variable and respective fallback\n/// @param {String} $cssvar - Variable name to be used and prepended with --pfe-theme\n/// @param {String} $fallback [null] - Optional custom fallback\n/// @see $pfe-vars\n/// @see $pfe-colors\n/// @see $pfe-broadcasted\n/// @example scss - In your component styles\n///   .my-element {\n///     padding:     pfe-var( container-spacer );\n///     font-size:   pfe-var( font-size );\n///   }\n/// @example - css Rendered output\n///   .my-element {\n///      padding: var(--pfe-theme--container-spacer, 16px);\n///      font-size: var(--pfe-theme--font-size, 16px);\n///   }\n@function pfe-var($cssvar, $fallback: null) {\n    $var-name: to-string($cssvar, \"--\");\n    @if map-get($pfe-vars, $var-name) != null {\n        @return pfe-get-from-map(\"\", $var-name, $pfe-vars, $fallback);\n    }\n    @else if map-get($pfe-colors, $var-name) != null {\n        @return pfe-get-from-map(\"color\", $var-name, $pfe-colors, $fallback);\n    }\n    @else if map-get($pfe-broadcasted, $var-name) != null {\n        @return pfe-get-from-map(\"\", $var-name, $pfe-broadcasted);\n    }\n    @else if map-get($pfe-typography-base, $var-name) != null {\n        @return pfe-get-from-map(\"\", $var-name, $pfe-typography-base, $fallback);\n    }\n    // PATTERNFLY CORE:\n    @else if map-get($pf-type-sizing, $var-name) != null {\n        @return pfe-get-from-map(\"\", $var-name, $pf-type-sizing, $fallback, $prefix: \"pf-global\");\n    }\n    @else if map-get($pf-type-sizing--modifers, $var-name) != null {\n        @return pfe-get-from-map(\"\", $var-name, $pf-type-sizing--modifers, $fallback, $prefix: \"pf-c\");\n    }\n    @else if map-get($pf-type-sizing--content, $var-name) != null {\n        @return pfe-get-from-map(\"\", $var-name, $pf-type-sizing--content, $fallback, $prefix: \"pf-c\");\n    }\n    // PFE components (must be below core)\n    @else if map-get($pf-type-sizing--component, $var-name) != null {\n        @return pfe-get-from-map(\"\", $var-name, $pf-type-sizing--component, $fallback);\n    }\n\n    // DEPRECATED:\n    @else if map-get($pfe-typography-base-deprecated, $var-name) != null {\n        @return pfe-get-from-map(\"\", $var-name, $pfe-typography-base-deprecated, $fallback);\n    }\n    @else if map-get($pfe-typography-deprecated, $var-name) != null {\n        @return pfe-get-from-map(\"\", $var-name, $pfe-typography-deprecated, $fallback);\n    }\n\n    @else {\n        @error \"#{$var-name} could not be found.\";\n    }\n}","// $boxSize = any box-sizing property, default is border-box\n@mixin pfe-box-sizing($boxSize: border-box) {\n  *,\n  *::before,\n  *::after {\n    box-sizing: $boxSize;\n  }\n}\n\n@mixin pfe-clearfix {\n  &::after {\n    clear: both;\n    content: \"\";\n    display: table;\n  }\n}\n\n@mixin pfe-container {\n  @extend %container;\n\n  padding: calc(#{pfe-local(Padding--vertical)} / 2) #{pfe-local(Padding--horizontal)};\n\n  @media (min-width: pfe-breakpoint(sm)) {\n    padding: pfe-local(Padding);\n  }\n}\n\n// Note: This works best with the padding set on the container and the container nested\n// below the application of the collapsible mixin\n@mixin pfe-collapsible($state: closed) {\n\n  @if $state != closed {\n    opacity: 1;\n    height: auto;\n  } @else {\n    display: block;\n    position: relative;\n    transition: height pfe-var(animation-speed) pfe-var(animation-timing);\n    will-change: height;\n    overflow-y: clip;\n    height: 0;\n  }\n}\n\n/// Custom focus ring\n@mixin focus-ring(\n  $offset: 0,\n  $pseudo: after,\n  $color: pfe-var(link)\n) {\n  outline: none;\n  position: relative;\n\n  // Focus uses a pseudo-element because it needs to overflow the container, outline also does not support border-radius settings\n  &::#{$pseudo} {\n    position: absolute;\n    content: \"\";\n    top: $offset;\n    left: $offset;\n    width: calc(100% + #{pfe-var(ui--border-width--active)});\n    height: calc(100% + #{pfe-var(ui--border-width--active)});\n    border-radius: pfe-var(ui--border-radius);\n    border: pfe-var(ui--border-width--md) pfe-var(ui--border-style) transparent;\n    @include browser-query(ie11) {\n      height: 100%;\n    }\n  }\n\n  &:focus::#{$pseudo} {\n    border-color: $color;\n  }\n  \n  // Remove the focus indicator on mouse-focus for browsers\n  // that do support :focus-visible\n  &:focus:not(:focus-visible)::#{$pseudo} {\n    border: unset;\n  }\n}\n\n/// Accent bar styles\n@mixin accent-bar(\n  $direction: horizontal,\n  $offset: (\n    top: 0px,\n    left: 0px\n  ),\n  $thickness: pfe-var(surface--border-width--heavy),\n  $color: transparent\n) {\n  $vertical: \"\";\n  $horizontal: \"\";\n\n  position: absolute;\n  content: \"\";\n  @each $direction, $size in $offset {\n    #{$direction}: $size;\n    @if $direction == \"top\" or $direction == \"bottom\" {\n      @if $vertical != \"\" {\n        $vertical: \"#{$vertical} - #{$size}\";\n      } @else {\n        $vertical: \"#{$size}\";\n      }\n    } @else {\n      @if $horizontal != \"\" {\n        $horizontal: \"#{$horizontal} - #{$size)}\";\n      } @else {\n        $horizontal: \"#{$size}\";\n      }\n    }\n  }\n  background-color: $color;\n  @if $direction != horizontal {\n    width: calc(#{$thickness} - #{$horizontal});\n    height: calc(100% - #{$vertical});\n  } @else {\n    width: calc(100% - #{$vertical});\n    height: calc(#{$thickness} - #{$horizontal});\n  }\n}\n","////\n/// Accordion-specific SASS Vars\n/// @group accordion\n////\n\n@function pfe-accordion-variables($state: default, $context: default, $variant: default) {\n  // Shared variables for all contexts\n  $accordion-styles: ();\n\n  @if $state != expanded { // Default state\n    // Shared variables for all contexts\n    $accordion-styles: (\n      BorderColor--accent: transparent,\n      BorderColor:         pfe-var(surface--border),\n      BorderTopWidth:      pfe-var(surface--border-width),\n      BorderRightWidth:    0,\n      BorderBottomWidth:   pfe-var(surface--border-width),\n      BorderLeftWidth:     pfe-var(surface--border-width--heavy),\n      Color:               pfe-broadcasted(text),\n      TextAlign:           left,\n      accent: pfe-var(ui-accent),\n      base: (\n        Padding:         pfe-var(container-spacer)\n      )\n    );\n\n    @if $context == dark { // Dark context\n      $accordion-styles: (\n        accent: pfe-var(ui-accent--on-dark)\n      );\n    }\n    @else if $context == saturated { // Saturated context\n      $accordion-styles: (\n        accent: pfe-var(ui-accent--on-saturated)\n      );\n    }\n\n    @if $variant == disclosure {\n      $accordion-styles: (\n        BorderRightWidth: pfe-var(surface--border-width),\n        BorderLeftWidth: pfe-var(surface--border-width),\n        BorderColor--accent: pfe-var(surface--border)\n      );\n    }\n  }\n  @else { // Expanded state\n    // Shared variables for all contexts\n    $accordion-styles: (\n      BorderColor:         pfe-var(surface--border),\n      BorderRightWidth:    pfe-var(surface--border-width),\n      BorderLeftWidth:     pfe-var(surface--border-width--heavy),\n      // Defaults for light context\n      BackgroundColor:     rgba(255, 255, 255, 1),\n      Color:               pfe-var(text),\n      BorderColor--accent: pfe-local(accent),\n      BoxShadow: 0 5px pfe-var(surface--border-width--heavy) rgba(140, 140, 140, 0.35),\n      ZIndex: 3\n    );\n\n    @if $context == dark { // Dark context\n      $accordion-styles: (\n        BackgroundColor:    rgba(247, 247, 249, .1),\n        Color:               pfe-broadcasted(text),\n        BorderColor--accent: pfe-var(ui-accent--on-dark),\n        BoxShadow: none\n      );\n    }\n    @else if $context == saturated { // Saturated context\n      $accordion-styles: (\n        BackgroundColor:    rgba(0, 0, 0, 0.2),\n        Color:               pfe-broadcasted(text),\n        BorderColor--accent: pfe-var(ui-accent--on-saturated),\n        BoxShadow: none\n      );\n    }\n    \n    @if $variant == disclosure {\n      $accordion-styles: (\n        BorderLeftWidth: pfe-var(surface--border-width--heavy),\n        BorderColor--accent: pfe-var(ui-accent)\n      );\n    }\n  }\n\n  @return $accordion-styles;\n}\n\n@mixin pfe-accordion-props($variant: default) {\n  margin: 0;\n  width: pfe-local(Width, 100%);\n  max-width: 100%;\n  height: auto;\n  position: relative;\n\n  // Since the default bg color is transparent, look to broadcast values\n  background-color: pfe-local(BackgroundColor, transparent);\n  color:            pfe-local(Color);\n\n  // Border settings\n  border-width: 0;\n  border-style: pfe-var(surface--border-style);\n  border-color: pfe-local(BorderColor);\n  border-top-width:     pfe-local(BorderTopWidth, $fallback: pfe-var(surface--border-width));\n  border-right-width:   pfe-local(BorderRightWidth, $fallback: 0);\n  border-bottom-width:  pfe-local(BorderBottomWidth, $fallback: pfe-var(surface--border-width));\n  border-left-width: pfe-local(BorderLeftWidth, $fallback: pfe-var(surface--border-width--heavy));\n\n  @include browser-query(ie11) {\n    border-top-width:     pfe-fetch(surface--border-width);\n    border-right-width:   0;\n    border-bottom-width:  pfe-fetch(surface--border-width);\n    border-left-width:    pfe-fetch(surface--border-width--heavy);\n  }\n\n  // Custom border color for the accent mark on the left\n  border-left-color: pfe-local(BorderColor--accent);\n\n  box-shadow: pfe-local(BoxShadow);\n  z-index: pfe-local(ZIndex);\n\n  &:hover,\n  &:focus {\n    @include pfe-print-local((\n      BorderColor--accent: pfe-local(accent)\n    ));\n\n    @include browser-query(ie11) {\n      border-left-color: pfe-fetch(ui-accent);\n    }\n  }\n}\n\n//-- Trigger-specific properties\n@mixin pfe-trigger {\n  $chevron--spacing: 50px;\n\n  $LOCAL-VARIABLES: (\n    BorderBottomWidth: 0,\n    ZIndex: 3,\n    trigger: (\n      Padding: pfe-local(Padding, $region: base) $chevron--spacing pfe-local(Padding, $region: base) calc(#{pfe-local(Padding, $region: base)} * 1.5)\n    )\n  );\n\n  @include pfe-print-local($LOCAL-VARIABLES);\n  @include pfe-accordion-props;\n\n  // -webkit-appearance: button;\n  cursor: pointer;\n\n  font-family: inherit;\n  font-size:   pfe-local(FontSize--header, calc(#{pfe-var(font-size)} * 1.1));\n  font-weight: pfe-var(font-weight--bold);\n  text-align:  pfe-local(TextAlign, left);\n  line-height: pfe-var(line-height);\n  padding:     pfe-local(Padding, $region: trigger);\n\n  &:hover {\n    outline: none;\n    border-left-width: pfe-var(surface--border-width--heavy);\n  }\n\n  &:focus {\n      outline: none;\n      text-decoration: underline;\n  }\n\n  &::-moz-focus-inner {\n      border: 0;\n  }\n}\n\n@mixin pfe-trigger-last($context: light) {\n  @include pfe-print-local((\n    BorderBottomWidth: pfe-var(surface--border-width)\n  ));\n}\n\n//-- Panel-specific properties\n@mixin pfe-panel-variables($context: light) {\n  $LOCAL-VARIABLES: (\n    accent: pfe-var(ui-accent),\n    BorderTopWidth: 0\n  );\n\n  @if $context == \"light\" { // Light context\n    $LOCAL-VARIABLES: map-deep-merge($LOCAL-VARIABLES, (\n      BoxShadow: 0 5px pfe-var(surface--border-width--heavy) rgba(140, 140, 140, 0.35)\n    ));\n  }\n  @else {\n    $LOCAL-VARIABLES: map-deep-merge($LOCAL-VARIABLES, (\n      BoxShadow: none\n    ));\n  }\n\n  @include pfe-print-local($LOCAL-VARIABLES);\n}\n\n@mixin pfe-panel-container() {\n  // Ensure the box shadow does not propagate to nest accordions\n  @include pfe-print-local( ( BoxShadow: none ) );\n\n  @extend %container;\n  padding: pfe-local(Padding, $region: panel-container);\n}\n\n/// ===========================================================================\n/// Accordion chevrons\n/// ===========================================================================\n\n@mixin pfe-chevron($state: open, $position: after, $size: .4em, $offset: $size, $width: .1em) {\n  content: \"\";\n  position: absolute;\n  top: calc(#{pfe-var(container-spacer)} + #{$offset});\n\n  display: block;\n  border-style: pfe-var(surface--border-style);\n  height: $size;\n  width:  $size;\n  transition: transform 0.15s;\n  @if $state == open {\n    border-width: $width $width 0 0;\n    border-bottom: 0;\n    transform: rotate(135deg);\n    top: calc(#{pfe-var(container-spacer)} + #{$offset});\n    @if $position == before {\n      left: calc(#{pfe-var(container-spacer)} * 1.3125); // 21px\n      top: calc(#{pfe-var(container-spacer)} + .25em);\n      transform: rotate(135deg);\n    }\n    @else {\n      right: calc(#{pfe-var(container-spacer)} * 1.3125);\n    }\n  }\n  @else {\n    border-width: 0 $width $width 0;\n    transform: rotate(-45deg);\n    @if $position == before {\n      left: calc(#{pfe-var(container-spacer)} * 1.3125);\n      transform: rotate(-45deg);\n    }\n    @else {\n      right: calc(#{pfe-var(container-spacer)} * 1.3125);\n    }\n  }\n}\n\n/// ===========================================================================\n/// List styles\n/// ===========================================================================\n\n// Mixins and extends can't use the LOCAL-VARIABLES map because we would be\n// at risk of overriding an elements map if they call our mixin. We need to\n// use just regular sass variables and pfe-local and specify the $fallbacks.\n@mixin ordered-list-primary($size: 56px) {\n  // First we create our Sass variables that we will use for fallbacks\n  // The gap between list items\n  $gap: pfe-var(content-spacer);\n  // The space between the circle and content\n  $spacer: pfe-var(content-spacer);\n  // rgb value of the color theme of the circle\n  // we need to wrap this in a calc function so it can be dynamic.\n  $color: (238, 0, 0);\n  // font size of the number inside of the circle\n  $number-font-size: $pf-global--FontSize--2xl;\n\n  list-style: none;\n  min-height: pfe-local(gap, $fallback: $gap);\n  margin: pfe-local(gap, $fallback: $gap);\n  padding-left: pfe-local(PaddingLeft, $fallback: 0);\n\n  & > li {\n    // increment the local counter variable\n    counter-increment: pfe-list;\n    position: relative;\n    min-height: pfe-local(size, $region: circle, $fallback: $size);\n    // the li content will start after the circle and a defined spacer\n    padding-left: calc(#{pfe-local(spacer, $fallback: $spacer)} + #{pfe-local(size, $region: circle, $fallback: $size)});\n    // the li content needs to align with the middle of the radius but we\n    // need to account for the fact that it's also calculating the size\n    // of the line height of the number inside of the circle\n    padding-top: calc((#{pfe-local(size, $region: circle, $fallback: $size)} / 2) - ((#{pfe-local(FontSize, $region: circle, $fallback: $number-font-size)} / 2)));\n  }\n  & > ul {\n    list-style-type: disc;\n  }\n  & > li:before {\n    @include pfe-typography(2xl, $type: \"title\");\n    // we need to make sure that if the size of the number in the circle changes\n    // that doesn't affect the size or shape of the circle. since we don't have\n    // any more psuedo elements to work with, we need to use the flexbox technique\n    // to center the text.\n    display: block;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    text-align: center;\n    // make the circle using border-radius\n    border-radius: 50%;\n    // keep the circle on the upper left\n    position: absolute;\n    top: 0;\n    left: 0;\n    // set the size of the circle\n    width: pfe-local(size, $region: circle, $fallback: $size);\n    height: pfe-local(size, $region: circle, $fallback: $size);\n    // set the contents of the circle\n    content: counter(pfe-list);\n    font-size: pfe-local(FontSize, $region: circle, $fallback: $number-font-size);\n    color: rgba(#{pfe-local(color, $region: circle, $fallback: $color)}, 1);\n    // generate a background color based on the circle text color\n    // provide an override for BackgroundColor if the user needs to specify\n    // custom color.\n    background-color: pfe-local(BackgroundColor, $region: circle, $fallback: rgba(pfe-local(color, $region: circle, $fallback: $color), 0.07));\n  }\n\n  & > li *:first-child {\n    margin-top: pfe-local(MarginTop, $region: item-first-child, $fallback: 0);\n  }\n\n  // for pfe-grids we:\n  //  - use the pfe-grid API to add grid gap.\n  //  - remove the margins on the <li> tags in favor of the grid gap.\n  //  - add top and bottom margin back to the <ol> tags to maintain correct offset with surrounding content.\n  &.pfe-l-grid.pfe-m-gutters {\n    --pfe-grid--gap--vertical: #{pfe-local(gap, $fallback: $gap)};\n    --pfe-grid--gap--horizontal: #{pfe-local(gap, $fallback: $gap)};\n    --pfe-grid--Margin: #{pfe-local(Margin, $fallback: $gap)};\n    --pfe-grid__item--Margin: #{pfe-local(Margin, $region: item, $fallback: 0)};\n  }\n}\n","// NOTE: pfe-accordion uses shared styles that can be found in `pfe-sass/mixins/_components.scss`\n@import \"../../pfe-sass/pfe-sass\";\n\n$LOCAL: accordion;\n$LOCAL-VARIABLES: (\n    Padding: pfe-var(container-padding) calc(#{pfe-var(container-padding)} * 1.5),\n\n    BorderColor:   pfe-var(surface--border),\n    BorderWidth:   pfe-var(surface--border-width),\n    accent--width: pfe-var(surface--border-width--active),\n\n    Width:             100%,\n    MaxWidth--content: 80ch,\n\n    BoxShadow: 0 5px 4px transparent,\n    ZIndex:    3,\n\n    FontSize--header:   pfe-var(FontSize--xl),\n    FontWeight--header: pfe-var(font-weight--normal),\n    TextAlign:          left,\n    \n    BackgroundColor: transparent,\n    Color:           pfe-broadcasted(text),\n    accent:          transparent,\n    \n    // Hover/focus state\n    BackgroundColor--active: pfe-var(surface--lighter),\n    Color--active:           pfe-broadcasted(text),\n    accent--active:          pfe-var(ui-accent),\n\n    // Open state\n    BackgroundColor--expanded: pfe-var(surface--lightest),\n    Color--expanded:           pfe-broadcasted(text),\n    accent--expanded:          pfe-var(ui-accent),\n    BoxShadow--expanded:       0 5px 4px rgba(140, 140, 140, 0.35), // @TODO Update to  use box-shadow variables\n);\n\n@mixin pfe-accordion--expanded() {\n    // Create a smoother appearance for the shadow and added borders\n    :host {\n        transition-property: box-shadow, border;\n        transition-timing-function: pfe-var(animation-timing);\n        transition-duration: calc(pfe-var(animation-speed) / 2);\n    }\n\n    :host([expanded]),\n    :host(.animating) {\n        --pfe-accordion--BackgroundColor: #{pfe-local(BackgroundColor--expanded)};\n        --pfe-accordion--Color:           #{pfe-local(Color--expanded)};\n        --pfe-accordion--accent:          #{pfe-local(accent--expanded)};\n    }\n\n    // Add this after animation is complete (looks odd during transition)\n    :host([expanded]:not(.animating)) {\n        --pfe-accordion--BoxShadow: #{pfe-local(BoxShadow--expanded)};\n    }\n\n    @each $context in (dark, saturated) {\n        $overlay: rgba(247, 247, 249, .1);\n\n        @if $context==saturated {\n            $overlay: rgba(0, 0, 0, .2);\n        }\n\n        // Set properties to use their active modifier\n        :host([on=\"#{$context}\"][expanded]),\n        :host([on=\"#{$context}\"].animating) {\n            --pfe-accordion--BackgroundColor: #{pfe-local(BackgroundColor--expanded, $overlay)};\n            --pfe-accordion--Color:           #{pfe-local(Color--expanded, pfe-broadcasted(text--on-#{$context}))};\n            --pfe-accordion--accent:          #{pfe-local(accent--expanded, pfe-var(ui-accent--on-#{$context}))};\n        }\n\n        :host([expanded]:not(.animating)) {\n            --pfe-accordion--BoxShadow: #{pfe-local(BoxShadow--expanded, none)};\n        }\n    }\n}"],"sourceRoot":"../src"}