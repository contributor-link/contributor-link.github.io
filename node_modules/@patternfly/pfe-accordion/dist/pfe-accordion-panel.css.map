{"version":3,"sources":["../../pfe-collapse/src/pfe-collapse-panel.scss","pfe-accordion-panel.css","pfe-accordion-panel.scss","../../pfe-sass/extends/_extends.scss","../../pfe-sass/functions/_custom-properties.scss","../../pfe-sass/mixins/_mixins.scss","../../pfe-sass/mixins/_containers.scss","_shared-assets.scss"],"names":[],"mappings":"AAAA;EACE,aAAa;EACb,gBAAgB;EAChB,mBAAmB;ACCrB;;ADEA;;EAEE,cAAc;EACd,kBAAkB;ACCpB;;ADEA;EACE,cAAc;EACd,2CAAmC;EAAnC,mCAAmC;ACCrC;;AC+CA;ECpCE,kBAAkB;EAClB,cAAc;EACd,WAAW;EACX,aCQkC;EDRlC,kDCQkC;AHfpC;;AInBM;EHSN;IGT4F,UAAA;IF4CxF,iCAAyD;IACzD,yBAAiC;EFnBnC;AACF;;AD9BA;EMmCI,cAAc;EACd,kBAAkB;EAClB,wEFAgC;EEAhC,gEFAgC;EEAhC,+IFAgC;EEAhC,uIFAgC;EEChC,mBAAmB;EACnB,gBAAgB;EAChB,SAAS;EJxBX,WAAW;EACX,UAAU;EAEV,SAAS;EACT,UAAU;EAEV,6BEyDkC;EFzDlC,oEEyDkC;EFxDlC,cEwDkC;EFxDlC,yEEwDkC;EFvDlC,yCEuDkC;UFvDlC,iCEuDkC;EFvDlC,0EEuDkC;UFvDlC,kEEuDkC;EFtDlC,8BAAsB;UAAtB,sBAAsB;EAGtB,mBESkC;EFTlC,4DESkC;EFRlC,qBEkDkC;EFlDlC,kGEkDkC;EFjDlC,iBEiDkC;EFjDlC,6FEiDkC;EF9ClC,mBAAmB;EACnB,sBAAsB;ADkBxB;;ACxCA;;;EIPI,8BAJsC;UAItC,sBAJsC;ALyD1C;;AC9CA;EAgCI,gCAA2B;ADkB/B;;AClDA;EIgFE,kBAAkB;EAClB,WAAW;EAET,sBJ3CgD;EI2ChD,kGJ3CgD;EI2ChD,oBJ1C8C;EI0C9C,gGJ1C8C;EIyDhD,6BF/BkC;EE+BlC,2DF/BkC;EEiChC,iCAA2C;EAA3C,mMAA2C;EAC3C,mCAAiC;EAAjC,+GAAiC;EJvDjC,oBAAuC;EAAvC,kDAAuC;ADe3C;;ACXA;EAME,qBAAqB;EAErB,8BESkC;EFTlC,uIESkC;AHDpC;;AChBA;EInDI,WAAW;EACX,WAAW;EACX,cAAc;ALuElB;;ACZE;EACE,qDEMgC;EFNhC,oNEMgC;AHSpC;;ACXE;EACE,eECgC;EFDhC,wDECgC;AHapC;;ADhFA;EE6EE,8BEVkC;EFUlC,4DEVkC;AHiBpC;;ACJA;EACE,iBAAiB;EACjB,gBAAgB;EAChB,wBEhBkC;EFgBlC,oGEhBkC;EE/ChC,UAAU;EACV,YAAY;ALuEhB;;ADxGA;EOwCQ,uDAAuC;EAAvC,+CAAuC;EAAvC,uCAAuC;EAAvC,2DAAuC;EACvC,4EHJ4B;UGI5B,oEHJ4B;EGI5B,gHHJ4B;UGI5B,wGHJ4B;EGK5B,+DAAuD;UAAvD,uDAAuD;ANoE/D;;AMjEI;;EAEI,mIAAiC;EACjC,8GAAuB;EACvB,kHAAwB;ANoEhC;;ACzBA;EKtCQ,0GAA2B;ANmEnC;;AMxDQ;;EAEI,2GAAiC;EACjC,oHAAuB;EACvB,8HAAwB;AN2DpC;;ACpCA;EKnBY,2EAA2B;AN2DvC;;AMnEQ;;EAEI,qGAAiC;EACjC,yHAAuB;EACvB,gIAAwB;ANsEpC;;AC/CA;EKnBY,2EAA2B;ANsEvC","file":"pfe-accordion-panel.css","sourcesContent":[":host {\n  display: none;\n  overflow: hidden;\n  will-change: height;\n}\n\n:host([expanded]),\n:host([expanded]) {\n  display: block;\n  position: relative;\n}\n\n:host(.animating) {\n  display: block;\n  transition: height 0.3s ease-in-out;\n}\n",":host {\n  display: none;\n  overflow: hidden;\n  will-change: height;\n}\n\n:host([expanded]),\n:host([expanded]) {\n  display: block;\n  position: relative;\n}\n\n:host(.animating) {\n  display: block;\n  transition: height 0.3s ease-in-out;\n}\n\n.pf-c-accordion__expanded-content {\n  position: relative;\n  display: block;\n  width: 100%;\n  padding: var(--pfe-theme--container-padding, 1rem);\n}\n\n@media screen and (-ms-high-contrast: active), screen and (-ms-high-contrast: none) {\n  :host {\n    /* IE10+ */\n    background-color: #fff !important;\n    color: #151515 !important;\n  }\n}\n\n:host {\n  display: block;\n  position: relative;\n  transition: height var(--pfe-theme--animation-speed, 0.3s) var(--pfe-theme--animation-timing, cubic-bezier(0.465, 0.183, 0.153, 0.946));\n  will-change: height;\n  overflow-y: clip;\n  height: 0;\n  width: 100%;\n  z-index: 0;\n  margin: 0;\n  padding: 0;\n  background-color: var(--pfe-accordion--BackgroundColor, transparent);\n  color: var(--pfe-accordion--Color, var(--pfe-broadcasted--text, #3c3f42));\n  box-shadow: var(--pfe-accordion--BoxShadow, 0 5px 4px transparent);\n  box-sizing: border-box;\n  border-style: var(--pfe-theme--surface--border-style, solid);\n  border-color: var(--pfe-accordion--BorderColor, var(--pfe-theme--color--surface--border, #d2d2d2));\n  border-width: var(--pfe-accordion--BorderWidth, var(--pfe-theme--surface--border-width, 1px));\n  border-top-width: 0;\n  border-bottom-width: 0;\n}\n\n:host *,\n:host *::before,\n:host *::after {\n  box-sizing: border-box;\n}\n\n:host ::slotted(*) {\n  --pfe-accordion--BoxShadow: none;\n}\n\n:host::after {\n  position: absolute;\n  content: \"\";\n  bottom: calc(-1 * var(--pfe-accordion--BorderWidth, var(--pfe-theme--surface--border-width, 1px)));\n  left: calc(-1 * var(--pfe-accordion--BorderWidth, var(--pfe-theme--surface--border-width, 1px)));\n  background-color: var(--pfe-accordion--accent, transparent);\n  width: calc(var(--pfe-accordion--accent--width, var(--pfe-theme--surface--border-width--active, 3px)) - calc(-1 * var(--pfe-accordion--BorderWidth, var(--pfe-theme--surface--border-width, 1px))));\n  height: calc(100% - calc(-1 * var(--pfe-accordion--BorderWidth, var(--pfe-theme--surface--border-width, 1px))));\n  z-index: calc(var(--pfe-accordion--ZIndex, 3) + 1);\n}\n\n.pf-c-accordion__expanded-content {\n  display: inline-block;\n  padding: var(--pfe-accordion--Padding, var(--pfe-theme--container-padding, 1rem) calc(var(--pfe-theme--container-padding, 1rem) * 1.5));\n}\n\n.pf-c-accordion__expanded-content::after {\n  clear: both;\n  content: \"\";\n  display: table;\n}\n\n:host([disclosure=\"true\"]) .pf-c-accordion__expanded-content {\n  padding: var(--pfe-accordion__panel-container--Padding, 0 calc(var(--pfe-theme--container-padding, 1rem) * 3) calc(var(--pfe-theme--container-padding, 1rem)) calc(var(--pfe-theme--container-padding, 1rem) * 1.5));\n}\n\n:host(:not([full-width])) .pf-c-accordion__expanded-content {\n  max-width: var(--pfe-accordion--MaxWidth--content, 80ch);\n}\n\n:host(.animating) {\n  border-left-color: var(--pfe-accordion--accent, transparent);\n}\n\n:host([expanded]:not(.animating)) {\n  overflow: visible;\n  margin-bottom: 0;\n  border-bottom-width: var(--pfe-accordion--BorderWidth, var(--pfe-theme--surface--border-width, 1px));\n  opacity: 1;\n  height: auto;\n}\n\n:host {\n  transition-property: box-shadow, border;\n  transition-timing-function: var(--pfe-theme--animation-timing, cubic-bezier(0.465, 0.183, 0.153, 0.946));\n  transition-duration: calc(pfe-var(animation-speed) / 2);\n}\n\n:host([expanded]),\n:host(.animating) {\n  --pfe-accordion--BackgroundColor: var(--pfe-accordion--BackgroundColor--expanded, var(--pfe-theme--color--surface--lightest, #fff));\n  --pfe-accordion--Color:           var(--pfe-accordion--Color--expanded, var(--pfe-broadcasted--text, #3c3f42));\n  --pfe-accordion--accent:          var(--pfe-accordion--accent--expanded, var(--pfe-theme--color--ui-accent, #06c));\n}\n\n:host([expanded]:not(.animating)) {\n  --pfe-accordion--BoxShadow: var(--pfe-accordion--BoxShadow--expanded, 0 5px 4px rgba(140, 140, 140, 0.35));\n}\n\n:host([on=\"dark\"][expanded]),\n:host([on=\"dark\"].animating) {\n  --pfe-accordion--BackgroundColor: var(--pfe-accordion--BackgroundColor--expanded, rgba(247, 247, 249, 0.1));\n  --pfe-accordion--Color:           var(--pfe-accordion--Color--expanded, var(--pfe-broadcasted--text--on-dark, #fff));\n  --pfe-accordion--accent:          var(--pfe-accordion--accent--expanded, var(--pfe-theme--color--ui-accent--on-dark, #73bcf7));\n}\n\n:host([expanded]:not(.animating)) {\n  --pfe-accordion--BoxShadow: var(--pfe-accordion--BoxShadow--expanded, none);\n}\n\n:host([on=\"saturated\"][expanded]),\n:host([on=\"saturated\"].animating) {\n  --pfe-accordion--BackgroundColor: var(--pfe-accordion--BackgroundColor--expanded, rgba(0, 0, 0, 0.2));\n  --pfe-accordion--Color:           var(--pfe-accordion--Color--expanded, var(--pfe-broadcasted--text--on-saturated, #fff));\n  --pfe-accordion--accent:          var(--pfe-accordion--accent--expanded, var(--pfe-theme--color--ui-accent--on-saturated, #fff));\n}\n\n:host([expanded]:not(.animating)) {\n  --pfe-accordion--BoxShadow: var(--pfe-accordion--BoxShadow--expanded, none);\n}\n","// Import the base styles first\n@import \"../../pfe-collapse/src/pfe-collapse-panel.scss\";\n\n// Then layer the shared assets over it\n@import \"shared-assets\";\n\n/// ===========================================================================\n/// ACCORDION PANEL\n/// Styles sourced from: @patternfly/patternfly/components/Accordion/accordion.scss\n/// then updated for pfe theming variables\n/// ===========================================================================\n\n:host {\n  @include pfe-box-sizing;\n  @include pfe-collapsible($state: closed);\n\n  width: 100%;\n  z-index: 0;\n\n  margin: 0;\n  padding: 0;\n\n  background-color: pfe-local(BackgroundColor, transparent);\n  color: pfe-local(Color);\n  box-shadow: pfe-local(BoxShadow);\n  box-sizing: border-box;\n\n  // Border settings\n  border-style: pfe-var(surface--border-style);\n  border-color: pfe-local(BorderColor);\n  border-width: pfe-local(BorderWidth);\n\n  // No visible top border on the panel is necessary\n  border-top-width: 0;\n  border-bottom-width: 0;\n\n  // Allows the headers to sit flush against each other\n  // margin-bottom: calc(-1 * #{pfe-local(BorderWidth)});\n\n  // Force IE11 to use white to prevent content from being un-readable\n  @extend %fallback-surface;\n\n  ::slotted(*) {\n    // Ensure the box shadow does not propagate to nested accordions\n    --pfe-accordion--BoxShadow: none;\n  }\n\n  // Accent bar\n  &::after {\n    @include accent-bar(\n      $direction: vertical,\n      $offset: (\n        bottom: calc(-1 * #{pfe-local(BorderWidth)}),\n        left: calc(-1 * #{pfe-local(BorderWidth)})\n      ),\n      $thickness: pfe-local(accent--width),\n      $color: pfe-local(accent) // defaults to transparent\n    );\n    z-index: calc(#{pfe-local(ZIndex)} + 1);\n  }\n}\n\n.pf-c-accordion__expanded-content {\n  @extend %container;\n  @include pfe-clearfix;\n\n  // Note: inline-block is important for accomodating for inline\n  // margin-top values inside the default slot\n  display: inline-block;\n\n  padding: pfe-local(Padding);\n\n  :host([disclosure=\"true\"]) & {\n    padding: pfe-local(Padding, $region: panel-container, $fallback: 0 calc(#{pfe-var(container-padding)} * 3) calc(#{pfe-var(container-padding)}) calc(#{pfe-var(container-padding)} * 1.5));\n  }\n\n  // Allow opt-out of panel max-width via attribute or CSS variable\n  :host(:not([full-width])) & {\n    max-width: pfe-local(MaxWidth--content);\n  }\n}\n\n/// ===========================================================================\n/// EXPANDED STYLES\n/// ===========================================================================\n\n// Set the left border to blue during animation to prevent flicker\n// from overflow change\n:host(.animating) {\n  border-left-color: pfe-local(accent);\n}\n\n:host([expanded]:not(.animating)) {\n  overflow: visible;\n  margin-bottom: 0;\n  border-bottom-width: pfe-local(BorderWidth);\n  @include pfe-collapsible($state: open);\n}\n\n// Same styles as the header, see shared-assets\n@include pfe-accordion--expanded();\n","// @todo Change to mixins; no efficiency gain with placeholders in web components\n\n/// Clear box element styles\n%reset-box {\n  margin: 0;\n  padding: 0;\n}\n\n/// Clear list styles\n%reset-list {\n  margin: 0;\n  padding: 0;\n  list-style: none;\n}\n\n/// Clear button styles\n%reset-button {\n  background-color: transparent;\n  border: none;\n  margin: 0;\n  padding: 0;\n  text-align: left;\n}\n\n/// Set up a container element\n%container {\n  position: relative;\n  display: block;\n  width: 100%;\n  padding: pfe-var(container-padding);\n}\n\n/// Screen-reader only content\n%sr-only {\n  position: absolute;\n  overflow: hidden;\n  clip: rect(0, 0, 0, 0);\n  height: 1px;\n  width: 1px;\n  margin: -1px;\n  padding: 0;\n  border: 0;\n}\n\n/// Fallback surface styles for IE11 only\n%fallback-surface {\n  @include browser-query(ie11) {\n    background-color: pfe-fetch(surface--lightest) !important;\n    color: pfe-fetch(text) !important;\n  }\n}\n\n/// Fallback text styles for IE11 only\n%fallback-text {\n  @include browser-query(ie11) {\n    color: pfe-fetch(text) !important;\n  }\n}\n","////\n/// Tools for leveraging custom property stacks\n/// @group custom-properties\n/// @author castastrophe\n////\n\n/// Get full theme stack with a fallback from the provided map - used by pfe-var and pfe-zindex\n/// @param {String} $category  - Category name to be appended to variables within the map/system\n/// @param {String} $key - Variable name to be used and prepended with --pfe-theme\n/// @param {Map} $map  - Sass map of variables\n/// @param {String} $fallback [null]  - Optional fallback override\n/// @param {Boolean} $use-fallback [true]  - Optional hook to return a stack with no fallback value\n/// @requires $custom-prop-prefix\n/// @return {String} theme stack with fallback value from a sass map\n@function pfe-get-from-map($category, $key, $map, $fallback: null, $prefix: \"#{$custom-prop-prefix}-theme\", $use-fallback: true) {\n    // Start building the variable declaration\n    $var-declaration: \"--#{$prefix}--\";\n    @if $prefix == \"pf-c\" {\n        $var-declaration: \"--#{$prefix}-\";  // one dash at the end\n    }\n    // If the category exists, inject that into the string\n    @if $category != \"\" {\n        $var-declaration: \"#{$var-declaration}#{$category}--\";\n    }\n    // Append the key to the string\n    $var-declaration: \"#{$var-declaration}#{$key}\";\n\n    // If the fallback is not provided but use-fallback is set to true\n    @if $fallback == null and $use-fallback and map-get($map, $key) != null {\n        $fallback: map-get($map, $key);\n    }\n    @if $fallback != null {\n        // Create the variable declaration\n        $var-declaration: \"#{$var-declaration}, #{$fallback}\";\n    }\n\n    // Return the variable declaration string\n    @return var(#{$var-declaration});   \n}\n\n\n\n/// Returns CSS Var for the local component-scoped variable\n/// @param {String} $cssvar - Variable identifiers which are postfixed and combined using '--'\n/// @param {String} $region - Identifies the region or slot to which this is assigned\n/// @see $custom-prop-prefix\n/// @see $LOCAL\n/// @example\n///   :host {\n///       padding-top:      #{pfe-local(paddingTop)};\n///       padding-bottom:   #{pfe-local(paddingBottom)};\n///   }\n@function pfe-local($cssvar, $fallback: null, $region: null) {\n    // If a fallback is not defined, use the global variables map\n    @if $fallback == null and length($LOCAL-VARIABLES) > 0 {\n        @if $region == null {\n            $fallback: map-get($LOCAL-VARIABLES, $cssvar);\n        }\n        @else {\n            $submap: map-get($LOCAL-VARIABLES, $region);\n            @if type-of($submap) == \"map\" {\n                $fallback: map-deep-get($LOCAL-VARIABLES, $region, $cssvar);\n            }\n        }\n    }\n\n    // If a region value exists, build the region string\n    @if $region != null {\n        $region: \"__#{$region}\";\n    }\n\n    // Start building the variable declaration\n    $var-declaration: \"--#{$custom-prop-prefix}-#{$LOCAL}#{$region}--#{to-string($cssvar, '--')}\";\n    \n    @if $fallback != null {\n        $var-declaration: \"#{$var-declaration}, #{$fallback}\";\n    }\n\n    // Return the variable declaration string\n    @return var(#{$var-declaration});\n}\n\n/// Fetches a CSS variable stack for broadcasted variables, providing a hook for context\n/// to influence the styles of children elements such as p tags or links.\n/// @param {String} $broadcast - name of the broadcast variable to apply\n/// @requires {String} $custom-prop-prefix - Name of repo, which is \"pfe\"\n/// @example - scss\n///   :host {\n///     color: pfe-broadcasted(link);\n///   }\n/// @example - css\n///   :host {\n///     color: var(--pfe-broadcasted--link, #06c);\n///   }\n@function pfe-broadcasted($broadcast, $use-fallback: true) {\n    $fallback: \"\";\n    @if $use-fallback {\n        $fallback: \", #{map-get($pfe-broadcasted, #{to-string($broadcast,'--')})}\";\t\n    }\n    @if not index($BROADCAST-VARS, first(str-split($broadcast, '--'))) {\n      @error \"--#{$custom-prop-prefix}-broadcasted--#{$broadcast} variable is not currently supported.\";\n    }\n    @else {\n      @return var(--#{$custom-prop-prefix}-broadcasted--#{to-string($broadcast,'--')}#{unquote($fallback)});\n    }\n}\n\n/// Returns CSS variable stack with exposed theme variable and respective fallback\n/// @param {String} $cssvar - Variable name to be used and prepended with --pfe-theme--zindex\n/// @requires {Map} $pfe-zindex - SASS Map of z-index values\n/// @see $pfe-zindex\n/// @example - scss - In your component styles\n///   .my-element {\n///     z-index: pfe-zindex( content );\n///   }\n\n@function pfe-zindex($cssvar) {\n    $var-name: to-string($cssvar, \"--\");\n    @if map-get($pfe-zindex, $var-name) != null {\n        @return pfe-get-from-map(\"zindex\", $var-name, $pfe-zindex);\n    }\n    @else {\n        @error \"The key for #{$var-name} could not be found in the $pfe-zindex map.\";\n    }\n}\n\n/// Returns the value (only) of a property from the respective maps\n/// Similar to pfe-var, but does not include css variable in the compiled CSS\n/// @param {String} $name - Name of the key for the map\n/// @param {String} $region - Identifies the region or slot to which this is assigned\n/// @see $pfe-vars\n/// @see $pfe-colors\n/// @see $pfe-broadcasted\n/// @example - scss - In your component styles\n///   .my-element {\n///     background-color: pfe-fetch( ui-base );\n///   }\n@function pfe-fetch($name, $region: null) {\n    $var-name: to-string($name, \"--\");\n    @if $region != null and map-deep-get($LOCAL-VARIABLES, $region, $var-name) != null {\n        @return map-deep-get($LOCAL-VARIABLES, $region, $var-name);\n    }\n    @else if $region == null and map-get($LOCAL-VARIABLES, $var-name) != null {\n        @return map-get($LOCAL-VARIABLES, $var-name);\n    }\n    @else if map-get($pfe-vars, $var-name) != null {\n        @return map-get($pfe-vars, $var-name);\n    }\n    @else if map-get($pfe-colors, $var-name) != null {\n        @return map-get($pfe-colors, $var-name);\n    }\n    @else if map-get($pfe-broadcasted, $var-name) != null {\n        @return map-get($pfe-broadcasted, $var-name);\n    }\n    @else if map-get($pfe-typography-base, $var-name) != null {\n        @return map-get($pfe-typography-base, $var-name);\n    }\n\n    // PATTERNFLY CORE\n    @else if map-get($pf-type-sizing, $var-name) != null {\n        @return map-get($pf-type-sizing, $var-name);\n    }\n    @else if map-get($pf-type-sizing--component, $var-name) != null {\n        @return map-get($pf-type-sizing--component, $var-name);\n    }\n    @else if map-get($pf-type-sizing--modifers, $var-name) != null {\n        @return map-get($pf-type-sizing--modifers, $var-name);\n    }\n    @else if map-get($pf-type-sizing--content, $var-name) != null {\n        @return map-get($pf-type-sizing--content, $var-name);\n    }\n    // DEPRECATED\n    @else if map-get($pfe-typography-base-deprecated, $var-name) != null {\n        @return map-get($pfe-typography-base-deprecated, $var-name);\n    }\n    @else if map-get($pfe-typography-deprecated, $var-name) != null {\n        @return map-get($pfe-typography-deprecated, $var-name);\n    }\n    @else {\n        @error \"#{$var-name} could not be found.\";\n    }\n}\n\n/// Returns CSS variable stack with exposed theme variable and respective fallback\n/// @param {String} $cssvar - Variable name to be used and prepended with --pfe-theme\n/// @param {String} $fallback [null] - Optional custom fallback\n/// @see $pfe-vars\n/// @see $pfe-colors\n/// @see $pfe-broadcasted\n/// @example scss - In your component styles\n///   .my-element {\n///     padding:     pfe-var( container-spacer );\n///     font-size:   pfe-var( font-size );\n///   }\n/// @example - css Rendered output\n///   .my-element {\n///      padding: var(--pfe-theme--container-spacer, 16px);\n///      font-size: var(--pfe-theme--font-size, 16px);\n///   }\n@function pfe-var($cssvar, $fallback: null) {\n    $var-name: to-string($cssvar, \"--\");\n    @if map-get($pfe-vars, $var-name) != null {\n        @return pfe-get-from-map(\"\", $var-name, $pfe-vars, $fallback);\n    }\n    @else if map-get($pfe-colors, $var-name) != null {\n        @return pfe-get-from-map(\"color\", $var-name, $pfe-colors, $fallback);\n    }\n    @else if map-get($pfe-broadcasted, $var-name) != null {\n        @return pfe-get-from-map(\"\", $var-name, $pfe-broadcasted);\n    }\n    @else if map-get($pfe-typography-base, $var-name) != null {\n        @return pfe-get-from-map(\"\", $var-name, $pfe-typography-base, $fallback);\n    }\n    // PATTERNFLY CORE:\n    @else if map-get($pf-type-sizing, $var-name) != null {\n        @return pfe-get-from-map(\"\", $var-name, $pf-type-sizing, $fallback, $prefix: \"pf-global\");\n    }\n    @else if map-get($pf-type-sizing--modifers, $var-name) != null {\n        @return pfe-get-from-map(\"\", $var-name, $pf-type-sizing--modifers, $fallback, $prefix: \"pf-c\");\n    }\n    @else if map-get($pf-type-sizing--content, $var-name) != null {\n        @return pfe-get-from-map(\"\", $var-name, $pf-type-sizing--content, $fallback, $prefix: \"pf-c\");\n    }\n    // PFE components (must be below core)\n    @else if map-get($pf-type-sizing--component, $var-name) != null {\n        @return pfe-get-from-map(\"\", $var-name, $pf-type-sizing--component, $fallback);\n    }\n\n    // DEPRECATED:\n    @else if map-get($pfe-typography-base-deprecated, $var-name) != null {\n        @return pfe-get-from-map(\"\", $var-name, $pfe-typography-base-deprecated, $fallback);\n    }\n    @else if map-get($pfe-typography-deprecated, $var-name) != null {\n        @return pfe-get-from-map(\"\", $var-name, $pfe-typography-deprecated, $fallback);\n    }\n\n    @else {\n        @error \"#{$var-name} could not be found.\";\n    }\n}","@mixin browser-query($browser-list) {\n  @each $browser in $browser-list {\n    @if $browser == ie11 {\n      @media screen and (-ms-high-contrast: active), screen and (-ms-high-contrast: none) { /* IE10+ */\n        @content;\n      }\n    }\n    @if $browser == edge12 {\n      @supports (-ms-accelerator: true) { /* Microsoft Edge Browser 12+ */\n        @content;\n      }\n    }\n    @if $browser == edge {\n      @supports (-ms-ime-align: auto) { /* Microsoft Edge Browser 16+ (All) */\n        @content;\n      }\n    }\n    @if $browser == firefox {\n      @media all and (min--moz-device-pixel-ratio:0) { /* Mozilla Firefox (All) */\n        @content;\n      }\n    }\n  }\n}\n\n@mixin pfe-transition($properties...) {\n  $return: null;\n  @each $property in $properties {\n    @if length($property) == 1 {\n      $return: append($return, #{$property} 250ms $pfe-global--animation-timing, comma);\n    }\n    @else if length($property) == 2 {\n      $return: append($return, nth($property, 1) nth($property, 2), comma);\n    }\n  }\n  transition: $return;\n}\n\n// Make a CSS arrow\n@mixin pfe-arrow($type, $color, $width: 8px, $height: 5px, $pseudo: false) {\n  $direction: (\n    up: 180deg,\n    down: 0deg,\n    right: -90deg,\n    left: 90deg,\n  );\n  border-style: pfe-var(surface--border-style);\n  border-width: $width $height 0;\n  border-color: transparent;\n  border-top-color: $color;\n  transform: rotate(map-get($direction, $type));\n  @if $pseudo {\n    display: inline-block;\n    content: \"\";\n    @content;\n  }\n}\n\n@mixin pfe-arrow-color($color) {\n  border-top-color: $color;\n}\n\n@mixin pfe-print-media {\n  @media print {\n    @content;\n  }\n}\n\n@mixin pfe-print-background {\n  -webkit-print-color-adjust: exact;\n  color-adjust: exact;\n}\n\n@mixin pfe-no-print-background {\n  @include pfe-print-media {\n    background-color: white !important;\n    background-image: none !important;\n    box-shadow: none !important;\n  }\n}\n\n@mixin pfe-hidden {\n  @at-root #{&}([hidden]) {\n    display: none;\n  }\n}\n\n@mixin pfe-pipe( $position: right, $padding: 0, $margin: 0, $color: $border-color) {\n  border: pfe-var(surface--border-width) pfe-var(surface--border-style) transparent;\n  border-#{$position}-color: $color;\n  @if $position == right {\n    padding-left: $padding;\n    margin-right: $margin;\n  }\n  @else if $position == left {\n    padding-right: $padding;\n    margin-left: $margin;\n  }\n}\n\n@mixin pfe-retina {\n  @media (-webkit-min-device-pixel-ratio: 2), (min-resolution: 192dpi) {\n    @content;\n  }\n}\n\n@mixin pfe-icon($path, $display: flex, $size: 1em) {\n  display: #{$display};\n  @if $path {\n    background: #{$path} no-repeat;\n    background-size: contain;\n    background-position: center;\n  }\n  width: #{$size};\n  height: #{$size};\n  @content;\n}\n\n@mixin pfe-local-debug($map: $LOCAL-VARIABLES) {\n  :root {\n      @include pfe-print-local($map);\n  }\n} ","// $boxSize = any box-sizing property, default is border-box\n@mixin pfe-box-sizing($boxSize: border-box) {\n  *,\n  *::before,\n  *::after {\n    box-sizing: $boxSize;\n  }\n}\n\n@mixin pfe-clearfix {\n  &::after {\n    clear: both;\n    content: \"\";\n    display: table;\n  }\n}\n\n@mixin pfe-container {\n  @extend %container;\n\n  padding: calc(#{pfe-local(Padding--vertical)} / 2) #{pfe-local(Padding--horizontal)};\n\n  @media (min-width: pfe-breakpoint(sm)) {\n    padding: pfe-local(Padding);\n  }\n}\n\n// Note: This works best with the padding set on the container and the container nested\n// below the application of the collapsible mixin\n@mixin pfe-collapsible($state: closed) {\n\n  @if $state != closed {\n    opacity: 1;\n    height: auto;\n  } @else {\n    display: block;\n    position: relative;\n    transition: height pfe-var(animation-speed) pfe-var(animation-timing);\n    will-change: height;\n    overflow-y: clip;\n    height: 0;\n  }\n}\n\n/// Custom focus ring\n@mixin focus-ring(\n  $offset: 0,\n  $pseudo: after,\n  $color: pfe-var(link)\n) {\n  outline: none;\n  position: relative;\n\n  // Focus uses a pseudo-element because it needs to overflow the container, outline also does not support border-radius settings\n  &::#{$pseudo} {\n    position: absolute;\n    content: \"\";\n    top: $offset;\n    left: $offset;\n    width: calc(100% + #{pfe-var(ui--border-width--active)});\n    height: calc(100% + #{pfe-var(ui--border-width--active)});\n    border-radius: pfe-var(ui--border-radius);\n    border: pfe-var(ui--border-width--md) pfe-var(ui--border-style) transparent;\n    @include browser-query(ie11) {\n      height: 100%;\n    }\n  }\n\n  &:focus::#{$pseudo} {\n    border-color: $color;\n  }\n  \n  // Remove the focus indicator on mouse-focus for browsers\n  // that do support :focus-visible\n  &:focus:not(:focus-visible)::#{$pseudo} {\n    border: unset;\n  }\n}\n\n/// Accent bar styles\n@mixin accent-bar(\n  $direction: horizontal,\n  $offset: (\n    top: 0px,\n    left: 0px\n  ),\n  $thickness: pfe-var(surface--border-width--heavy),\n  $color: transparent\n) {\n  $vertical: \"\";\n  $horizontal: \"\";\n\n  position: absolute;\n  content: \"\";\n  @each $direction, $size in $offset {\n    #{$direction}: $size;\n    @if $direction == \"top\" or $direction == \"bottom\" {\n      @if $vertical != \"\" {\n        $vertical: \"#{$vertical} - #{$size}\";\n      } @else {\n        $vertical: \"#{$size}\";\n      }\n    } @else {\n      @if $horizontal != \"\" {\n        $horizontal: \"#{$horizontal} - #{$size)}\";\n      } @else {\n        $horizontal: \"#{$size}\";\n      }\n    }\n  }\n  background-color: $color;\n  @if $direction != horizontal {\n    width: calc(#{$thickness} - #{$horizontal});\n    height: calc(100% - #{$vertical});\n  } @else {\n    width: calc(100% - #{$vertical});\n    height: calc(#{$thickness} - #{$horizontal});\n  }\n}\n","// NOTE: pfe-accordion uses shared styles that can be found in `pfe-sass/mixins/_components.scss`\n@import \"../../pfe-sass/pfe-sass\";\n\n$LOCAL: accordion;\n$LOCAL-VARIABLES: (\n    Padding: pfe-var(container-padding) calc(#{pfe-var(container-padding)} * 1.5),\n\n    BorderColor:   pfe-var(surface--border),\n    BorderWidth:   pfe-var(surface--border-width),\n    accent--width: pfe-var(surface--border-width--active),\n\n    Width:             100%,\n    MaxWidth--content: 80ch,\n\n    BoxShadow: 0 5px 4px transparent,\n    ZIndex:    3,\n\n    FontSize--header:   pfe-var(FontSize--xl),\n    FontWeight--header: pfe-var(font-weight--normal),\n    TextAlign:          left,\n    \n    BackgroundColor: transparent,\n    Color:           pfe-broadcasted(text),\n    accent:          transparent,\n    \n    // Hover/focus state\n    BackgroundColor--active: pfe-var(surface--lighter),\n    Color--active:           pfe-broadcasted(text),\n    accent--active:          pfe-var(ui-accent),\n\n    // Open state\n    BackgroundColor--expanded: pfe-var(surface--lightest),\n    Color--expanded:           pfe-broadcasted(text),\n    accent--expanded:          pfe-var(ui-accent),\n    BoxShadow--expanded:       0 5px 4px rgba(140, 140, 140, 0.35), // @TODO Update to  use box-shadow variables\n);\n\n@mixin pfe-accordion--expanded() {\n    // Create a smoother appearance for the shadow and added borders\n    :host {\n        transition-property: box-shadow, border;\n        transition-timing-function: pfe-var(animation-timing);\n        transition-duration: calc(pfe-var(animation-speed) / 2);\n    }\n\n    :host([expanded]),\n    :host(.animating) {\n        --pfe-accordion--BackgroundColor: #{pfe-local(BackgroundColor--expanded)};\n        --pfe-accordion--Color:           #{pfe-local(Color--expanded)};\n        --pfe-accordion--accent:          #{pfe-local(accent--expanded)};\n    }\n\n    // Add this after animation is complete (looks odd during transition)\n    :host([expanded]:not(.animating)) {\n        --pfe-accordion--BoxShadow: #{pfe-local(BoxShadow--expanded)};\n    }\n\n    @each $context in (dark, saturated) {\n        $overlay: rgba(247, 247, 249, .1);\n\n        @if $context==saturated {\n            $overlay: rgba(0, 0, 0, .2);\n        }\n\n        // Set properties to use their active modifier\n        :host([on=\"#{$context}\"][expanded]),\n        :host([on=\"#{$context}\"].animating) {\n            --pfe-accordion--BackgroundColor: #{pfe-local(BackgroundColor--expanded, $overlay)};\n            --pfe-accordion--Color:           #{pfe-local(Color--expanded, pfe-broadcasted(text--on-#{$context}))};\n            --pfe-accordion--accent:          #{pfe-local(accent--expanded, pfe-var(ui-accent--on-#{$context}))};\n        }\n\n        :host([expanded]:not(.animating)) {\n            --pfe-accordion--BoxShadow: #{pfe-local(BoxShadow--expanded, none)};\n        }\n    }\n}"],"sourceRoot":"../src"}